;; TODO: Cleanup a lot of unwatned customizations

(message "* --[ Loading my Emacs init file ]--")
;; uptimes
(setq emacs-load-start-time (current-time))

;; turn on Common Lisp support
(require 'cl)  ; provides useful things like `loop' and `setf'

;; allow quick include/exclude of setup parts
(defvar section-environment t)  ; required
(defvar section-loading-libraries t)  ; required
(defvar section-debugging t)
(defvar section-screen t)
(defvar section-basic t)
(defvar section-minibuffer t)
(defvar section-help t)
(defvar section-mark t)
(defvar section-killing t)
(defvar section-yanking t)
(defvar section-rectangles t)
(defvar section-cua-bindings t)
(defvar section-registers t)
(defvar section-display t)
(defvar section-search t)
(defvar section-fixit t)
(defvar section-keyboard-macros t)
(defvar section-files t)
(defvar section-buffers t)
(defvar section-windows t)
(defvar section-frames t)
(defvar section-international t)
(defvar section-major-modes t)
(defvar section-indentation t)
(defvar section-text t)
(defvar section-programs t)
(defvar section-building t)
(defvar section-maintaining t)
(defvar section-abbrevs t)
(defvar section-dired t)
(defvar section-calendar-diary t)
(defvar section-document-view t)
(defvar section-gnus t)
(defvar section-shell t)
(defvar section-emacs-server t)
(defvar section-printing t)
(defvar section-sorting t)
(defvar section-narrowing t)
(defvar section-saving-emacs-sessions t)
(defvar section-hyperlinking t)
(defvar section-amusements t)
(defvar section-pgg t)
(defvar section-customization t)
(defvar section-ms-dos t)
(defvar section-emacs-display t)

;;** Environment
(when section-environment (message "0 Environment...")

;; OS type --- are we running Microsoft Windows?
(defvar running-ms-windows
  (eq system-type 'windows-nt))

(defvar running-ms-windows
  (string-match "windows" (prin1-to-string system-type)))

(defvar running-gnu-linux
  (string-match "linux" (prin1-to-string system-type)))

;; OS type --- are we running GNU Linux?
(defmacro GNULinux (&rest body)
  (list 'if (string-match "linux" (prin1-to-string system-type))
	(cons 'progn body)))

(defmacro Windows (&rest body)
  (list 'if (string-match "windows" (prin1-to-string system-type))
	(cons 'progn body)))

(defmacro XLaunch (&rest body)
  (list 'if (eq window-system 'x)(cons 'progn body)))

;; Emacs type --- are we running GNU Emacs?
(defmacro GNUEmacs (&rest body)
  "Execute any number of forms if running under GNU Emacs."
  (list 'if (string-match "GNU Emacs" (version))
	(cons 'progn body)))

(message "0 Environment... Done"))

;; ===========================================================================
;; Simple Settings and Internal Packages
;; ===========================================================================

;; Miscellaneous settings
;; ----------------------
;;
;; Miscellaneous settings
;; ----------------------
;;
(setq-default inhibit-startup-screen t  ; Skip the startup screens
              initial-scratch-message nil
              frame-title-format '(buffer-file-name "%f" "%b") ; I already know this is Emacs
              truncate-lines t                        ; Truncate lines, don't wrap
              default-truncate-lines t
              font-lock-use-fonts '(or (mono) (grayscale)) ; Turn on syntax hilighting
              font-lock-use-colors '(color)
              font-lock-maximum-decoration t
              font-lock-maximum-size nil
              font-lock-auto-fontify t
              global-font-lock-mode t
              paren-mode 'sexp                        ; Highlight parenthesis
              blink-cursor-alist '((t . hollow))      ; Cursor blinks solid and hollow
              user-full-name "Chandra Mohan Babu Nadiminti" ; Set name
              user-mail-address "cnadimin@cisco.com" ; Set e-mail address
              query-user-mail-address nil
              display-warning-minimum-level 'error    ; Turn off anoying warning messages
              disabled-command-function nil           ; Don't second-guess advanced commands
              delete-key-deletes-forward t            ; Make delete key work normally
              kill-read-only-ok t                     ; Silently copy in read-only buffers
              column-number-mode t                    ; Display line and column numbers
              line-number-mode t
                                        ;tab-width 2                                                ; Set tab stops
                                        ;tab-stop-list '(2 4 6 8 10 12 14 16 18 20 22
                                        ;                24 26 28 30 32 34 36 38 40 42)
              indent-tabs-mode nil                    ; Use spaces only, no tabs
              page-delimiter "^\\s *\n\\s *"          ; Page delim one or more blank lines
              minibuffer-max-depth nil                ; Mini-buffer settings
              toolbar-print-function 'ps-print-buffer-with-faces ; Set the print button to print nice PS
              ps-line-number t
              ps-n-up-printing 2
              ps-print-color-p nil
              fill-column 75                          ; Wrap lines at 75th column
              initial-major-mode 'text-mode
              display-time-day-and-date t             ; Display the time and date on the mode line
              case-fold-search t                      ; Fold case on searches
              buffers-menu-sort-function 'sort-buffers-menu-by-mode-then-alphabetically ; Buffers menu settings
              buffers-menu-grouping-function 'group-buffers-menu-by-mode-then-alphabetically
              buffers-menu-submenus-for-groups-p t
              buffers-tab-filter-functions nil        ; Buffers tab is flat
              ispell-program-name "aspell"            ; Use aspell to spell check
              )

(GNUEmacs
 (Windows
   ;(set-default-font "-adobe-courier-medium-r-normal--18-180-75-75-m-110-iso8859-1")
   ;(set-default-font "-raster-Fixedsys-normal-r-normal-normal-12-90-96-96-c-80-iso8859-1")
  (set-default-font "-raster-Terminal-normal-r-normal-normal-16-120-96-96-c-120-ms-oemlatin")
  (modify-frame-parameters nil '((wait-for-wm . nil)))
  )
 )

(defun startup-echo-area-message ()     ; Use a more interesting startup message
  "By your command...")
;(if (fboundp 'set-frame-parameter)     ; Make the window 90% opaque in Carbon Emacs
    ;(set-frame-parameter nil 'alpha 90))
(if (fboundp 'set-scroll-bar-mode)      ; Scrollbars should always be on the right
    (set-scroll-bar-mode 'right))
(display-time)                          ; Display the time of day
(if (fboundp 'paren-set-mode)           ; Highlight the whole expression
    (paren-set-mode 'sexp)
  (setq show-paren-style 'expression)
  (show-paren-mode t))
(pending-delete-mode t)                 ; Typed text replaces selection
;(require 'pc-select)                    ; Turn on PC selection mode if needed
;(if (fboundp 'pc-select-mode)
    ;(pc-select-mode t))
;(if (fboundp 'pc-selection-mode)
    ;(pc-selection-mode t))
(auto-fill-mode t)                      ; Automatically wrap lines
(fset 'yes-or-no-p 'y-or-n-p)           ; Yes or no prompts accept short y or n
(require 'uniquify)                     ; Smarter buffer naming than x<1>, x<2>, ...
(setq uniquify-buffer-name-style 'post-forward
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")

; Let it be in UNIX mode only -- generic
;(if (featurep 'mswindows)                                     ; If we're on Windows, write files with CR/LF
;    (set-default-buffer-file-coding-system 'raw-text-dos))


;; Font lock customization
;; -----------------------
;; This is an attempt to provide a pleasing, sane and reasonably consistent
;; color scheme across GNU Emacs, XEmacs, Windows, X, and TTY systems.  It
;; also highlights trailing whitespace and fixme type tags.
;;
(require 'font-lock)
(if (fboundp 'global-font-lock-mode)
    (global-font-lock-mode t))
(make-face 'trailing-spaces-face "Face to display trailing spaces in.")
(add-hook 'font-lock-mode-hook    ; Show trailing spaces and make fixme tags standout
          (lambda ()
            (font-lock-add-keywords nil
                                    '(("[ \t]+$" 0 'trailing-spaces-face t)
                                      ("CHANDRA:?\\|FIXME:\\|TODO:\\|BUG:" 0 'font-lock-warning-face t)))))
(defun set-colour-theme (theme)
  "Helper function to set a bunch of faces and ignore potential errors from missing faces."
  (mapc (lambda (setting)
          (condition-case nil
              (face-spec-set (car setting) (cdr setting))
            (error t)))
        theme))
(defun light-on-dark-theme ()
  "Setup the colors for a light-on-dark theme."
  (interactive)
  (set-colour-theme
   '(
     (default . ((((type tty)) (:background "black" ((image :type jpeg :file "~/.emacs.d/background.png") :origin display) :foreground "white")) (t (:background "black" :foreground "grey"))))
     (cursor . ((t (:background "plum"))))
     (modeline . ((((type tty)) (:inverse-video t)) (t (:foreground "black" :background "grey75" :box (:style released-button)))))
     (font-lock-keyword-face . ((t (:foreground "red"))))
     (font-lock-comment-face . ((((type tty)) (:foreground "cyan")) (t (:foreground "steelblue" :italic t))))
     (font-lock-string-face . ((((type tty)) (:foreground "green")) (t (:foreground "lightgreen"))))
     (font-lock-doc-string-face . ((((type tty)) (:foreground "green")) (t (:foreground "lightgreen"))))
     (font-lock-doc-face . ((((type tty)) (:foreground "green")) (t (:foreground "lightgreen"))))
     (font-lock-function-name-face . ((((type tty)) (:foreground "red" :bold t)) (t (:foreground "coral" :bold t))))
     (font-lock-type-face . ((((type tty)) (:foreground "cyan" :bold t)) (t (:foreground "steelblue" :bold t))))
     (font-lock-variable-name-face . ((((type tty)) (:foreground "magenta")) (t (:foreground "orchid"))))
     (font-lock-warning-face . ((t (:foreground "red" :bold t))))
     (font-lock-reference-face . ((((type tty)) (:foreground "red")) (t (:foreground "coral"))))
     (font-lock-builtin-face . ((((type tty)) (:foreground "red")) (t (:foreground "coral"))))
     (font-lock-constant-face . ((((type tty)) (:foreground "red")) (t (:foreground "coral"))))
     (paren-match . ((((type tty)) (:background "blue")) (t (:background "midnightblue"))))
     (show-paren-match-face . ((((type tty)) (:background "blue")) (t (:background "midnightblue"))))
     (zmacs-region . ((((type tty)) (:background "magenta")) (t (:foreground "black" :background "lightcoral"))))
     (region . ((((type tty)) (:background "magenta")) (t (:foreground "black" :background "lightcoral"))))
     (isearch . ((t (:foreground "white" :background "red"))))
     (isearch-secondary . ((((type tty)) (:foreground "red" :background "white")) (t (:foreground "red3" :background "grey"))))
     (isearch-lazy-highlight-face . ((((type tty)) (:foreground "red" :background "white")) (t (:foreground "red3" :background "grey"))))
     (trailing-spaces-face . ((((type tty)) (:background "grey")) (t (:background "grey15")))))))
(defun dark-on-light-theme ()
  "Setup the colors for a dark-on-light theme."
  (interactive)
  (set-colour-theme
   '((default . ((((type tty)) (:background "unspecified-bg" :foreground "unspecified-fg")) (t (:background "white" :foreground "black"))))
     (cursor . ((t (:background "red"))))
     (modeline . ((((type tty)) (:inverse-video t)) (t (:foreground "black" :background "grey75" :box (:style released-button)))))
     (font-lock-keyword-face . ((t (:foreground "black" :bold t))))
     (font-lock-comment-face . ((t (:foreground "blue" :italic t :underline nil))))
     (font-lock-string-face . ((((type tty)) (:foreground "green")) (t (:foreground "green4"))))
     (font-lock-doc-string-face . ((((type tty)) (:foreground "green")) (t (:foreground "green4"))))
     (font-lock-doc-face . ((((type tty)) (:foreground "green")) (t (:foreground "green4"))))
     (font-lock-function-name-face . ((t (:foreground "red" :bold t))))
     (font-lock-type-face . ((((type tty)) (:foreground "blue" :bold t)) (t (:foreground "steelblue" :bold t))))
     (font-lock-variable-name-face . ((t (:foreground "magenta"))))
     (font-lock-warning-face . ((t (:foreground "red" :bold t))))
     (font-lock-reference-face . ((((type tty)) (:foreground "red")) (t (:foreground "red3"))))
     (font-lock-builtin-face . ((((type tty)) (:foreground "red")) (t (:foreground "red3"))))
     (font-lock-constant-face . ((((type tty)) (:foreground "red")) (t (:foreground "red3"))))
     (paren-match . ((((type tty)) (:background "cyan")) (t (:background "lightsteelblue"))))
     (show-paren-match-face . ((((type tty)) (:background "cyan")) (t (:background "lightsteelblue"))))
     (zmacs-region . ((((type tty)) (:background "magenta")) (t (:background "lightcoral"))))
     (region . ((((type tty)) (:background "magenta")) (t (:background "lightcoral"))))
     (isearch . ((t (:foreground "white" :background "red"))))
     (isearch-secondary . ((((type tty)) (:foreground "red" :background "white")) (t (:foreground "red3" :background "grey"))))
     (isearch-lazy-highlight-face . ((((type tty)) (:foreground "red" :background "white")) (t (:foreground "red3" :background "grey"))))
     (trailing-spaces-face . ((((type tty)) (:background "magenta")) (t (:background "mistyrose")))))))
(light-on-dark-theme)                   ; Choose dark theme

;; Text Settings
;; -------------
;; Basic, fundamental text mode settings.
;;
(add-hook 'text-mode-hook
(lambda ()
  (auto-fill-mode t)))                  ; Fill and wrap automatically

;; ============================================================================
;; External E-Lisp Packages
;; ============================================================================
(add-to-list 'load-path "~/.emacs.d/lisp")  ; Append the .emacs.d dir to the path

;; beginning-of-line-dynamic
;; -------------------------
;; Jumps to the beginning of text on the line, just like
;; beginning-of-line-text.  If it was already there, it jumps to the true
;; beginning of the line, before any space.  In other words, it toggles.
;; Basically, it's a smarter HOME command.
;;
(defun beginning-of-line-dynamic ()
  "Jumps to the beginning of text on line.  If already there, goes to the
true beginning of the line (before space.)"
  (interactive)
  (let ((cur (point)))
    (beginning-of-line-text)
    (if (= cur (point))
        (beginning-of-line))))
(define-key global-map [(home)] 'beginning-of-line-dynamic) ; Rebind HOME to our version


;; highlight-sloppy-grammar
;; ------------------------
;; This uses the font lock mechanism to highlight some potential
;; grammatical trouble spots.  It checks against a small list of common
;; problems such as duplicate words and instances of the passive voice.
;; It's not fool-proof but it does help when taking a pass over a paper.
;;
(defun highlight-sloppy-grammar ()
  "Highlight areas potentially containing sloppy grammar."
  (interactive)
  (make-face 'grammar-warning-face "Face to display grammar warnings in.")
  (face-spec-set 'grammar-warning-face
                 '((t (:bold t :foreground "orange" :underline t))))
  (font-lock-add-keywords nil
                          '(("\\<\\(?:were\\|was\\|is\\|are\\|has been\\|be\\)\\(?:[ \t\r\n]+[a-zA-Z]+\\)?[ \t\r\n]+[a-zA-Z]+ed\\>"
                             0 'grammar-warning-face t)
                            ("\\<\\([a-zA-Z]+\\)[ \t\r\n]+\\1\\>" 0 'grammar-warning-face t)
                            ("[,-][ \t\r\n]+that\\>" 0 'grammar-warning-face t)
                            ("[a-zA-Z]+[ \t\r\n]+which\\>" 0 'grammar-warning-face t)
                            ("\\<[a-z]+\\(?:n't\\|d've\\)\\>" 0 'grammar-warning-face t)
                            ("\\<by[ \t\r\n]+[a-z]+ing\\>" 0 'grammar-warning-face t)
                            ("\\<which[ \t\r\n]+was\\>" 0 'grammar-warning-face t)
                            ("\\<the[ \t\r\n]+[a-zA-Z]+[ \t\r\n]+of[ \t\r\n]+the\\>" 0 'grammar-warning-face t)))
  (font-lock-fontify-buffer))

;; show-ascii-chart
;; ----------------
;; Display a helpful ASCII reference chart when called.  Useful for quickly
;; double checking or looking up character codes.  Usually the
;; what-cursor-position (C-x =) is faster for spot lookups of the number
;; for a character here and there.  It's terrible, however, for finding the
;; character given a number.
;;
(defun show-ascii-chart ()
  "Display a helpful ASCII chart."
  (interactive)
  (let ((chart (concat
                "==============================================================================\n"
                "                        Common ASCII Codes And Escapes\n"
                "==============================================================================\n"
                "Char  Dec Hex Oct Esc Name             | Char  Dec Hex Oct Esc Name\n"
                "------------------------------------------------------------------------------\n"
                "(nul)   0  00 000 \\0  Null             | (np)   12  0c 014 \\f  Form Feed\n"
                "(bel)   7  07 007 \\a  Audible Alert    | (cr)   13  0d 015 \\r  Carriage Return\n"
                "(bs)    8  08 010 \\b  Backspace        | (sp)   32  20 040     Space\n"
                "(ht)    9  09 011 \\t  Horizontal Tab   | 0      48  30 060     Zero\n"
                "(nl)   10  0a 012 \\n  New Line         | A      65  41 101     Capital A\n"
                "(vt)   11  0b 013 \\v  Vertical Tab     | a      97  61 141     Lowercase a\n"
                "\n"
                "=============================================================================\n"
                "                                 ASCII Table\n"
                "=============================================================================\n"
                "Char  Dec Hex Oct | Char  Dec Hex Oct | Char  Dec Hex Oct | Char  Dec Hex Oct\n"
                "-----------------------------------------------------------------------------\n"
                "(nul)   0  00 000 | (sp)   32  20 040 | @      64  40 100 | `      96  60 140\n"
                "(soh)   1  01 001 | !      33  21 041 | A      65  41 101 | a      97  61 141\n"
                "(stx)   2  02 002 | \"      34  22 042 | B      66  42 102 | b      98  62 142\n"
                "(etx)   3  03 003 | #      35  23 043 | C      67  43 103 | c      99  63 143\n"
                "(eot)   4  04 004 | $      36  24 044 | D      68  44 104 | d     100  64 144\n"
                "(enq)   5  05 005 | %      37  25 045 | E      69  45 105 | e     101  65 145\n"
                "(ack)   6  06 006 | &      38  26 046 | F      70  46 106 | f     102  66 146\n"
                "(bel)   7  07 007 | '      39  27 047 | G      71  47 107 | g     103  67 147\n"
                "(bs)    8  08 010 | (      40  28 050 | H      72  48 110 | h     104  68 150\n"
                "(ht)    9  09 011 | )      41  29 051 | I      73  49 111 | i     105  69 151\n"
                "(nl)   10  0a 012 | *      42  2a 052 | J      74  4a 112 | j     106  6a 152\n"
                "(vt)   11  0b 013 | +      43  2b 053 | K      75  4b 113 | k     107  6b 153\n"
                "(np)   12  0c 014 | ,      44  2c 054 | L      76  4c 114 | l     108  6c 154\n"
                "(cr)   13  0d 015 | -      45  2d 055 | M      77  4d 115 | m     109  6d 155\n"
                "(so)   14  0e 016 | .      46  2e 056 | N      78  4e 116 | n     110  6e 156\n"
                "(si)   15  0f 017 | /      47  2f 057 | O      79  4f 117 | o     111  6f 157\n"
                "(dle)  16  10 020 | 0      48  30 060 | P      80  50 120 | p     112  70 160\n"
                "(dc1)  17  11 021 | 1      49  31 061 | Q      81  51 121 | q     113  71 161\n"
                "(dc2)  18  12 022 | 2      50  32 062 | R      82  52 122 | r     114  72 162\n"
                "(dc3)  19  13 023 | 3      51  33 063 | S      83  53 123 | s     115  73 163\n"
                "(dc4)  20  14 024 | 4      52  34 064 | T      84  54 124 | t     116  74 164\n"
                "(nak)  21  15 025 | 5      53  35 065 | U      85  55 125 | u     117  75 165\n"
                "(syn)  22  16 026 | 6      54  36 066 | V      86  56 126 | v     118  76 166\n"
                "(etb)  23  17 027 | 7      55  37 067 | W      87  57 127 | w     119  77 167\n"
                "(can)  24  18 030 | 8      56  38 070 | X      88  58 130 | x     120  78 170\n"
                "(em)   25  19 031 | 9      57  39 071 | Y      89  59 131 | y     121  79 171\n"
                "(sub)  26  1a 032 | :      58  3a 072 | Z      90  5a 132 | z     122  7a 172\n"
                "(esc)  27  1b 033 | ;      59  3b 073 | [      91  5b 133 | {     123  7b 173\n"
                "(fs)   28  1c 034 | <      60  3c 074 | \\      92  5c 134 | |     124  7c 174\n"
                "(gs)   29  1d 035 | =      61  3d 075 | ]      93  5d 135 | }     125  7d 175\n"
                "(rs)   30  1e 036 | >      62  3e 076 | ^      94  5e 136 | ~     126  7e 176\n"
                "(us)   31  1f 037 | ?      63  3f 077 | _      95  5f 137 | (del) 127  7f 177\n")))
    (if (fboundp 'with-displaying-help-buffer)
        (with-displaying-help-buffer
         (lambda ()
           (princ chart))
         "ASCII Chart")
      (with-output-to-temp-buffer "ASCII Chart"
        (princ chart)))))

;; ===========================================================================
;; The Menu
;; ===========================================================================
;; This adds a small menu for my little macros up above and other
;; additions.  This makes it relatively easy to access them in
;; Emacs (although the hotkeys are certainly more efficient.)
;;
(let ((menu '("Chandra"
                                        ;["Kill Other Buffers" kill-other-buffers]
                                        ;["Open In Browser" browse-selected-file]
                                        ;["Mini Emacs" toggle-mini-emacs]
                                        ;["Zoom to Fullscreen" toggle-zoom]
              ["ASCII Chart" show-ascii-chart]
              ["Highlight Sloppy Grammar" highlight-sloppy-grammar]
                                        ;["Simple Calc" simple-calc]
                                        ;["Speedbar" speedbar]
              ("Align"
               ["Align" align]
               ["Align On Regexp" align-regexp]
               ["Align As One Section" align-entire]
               ["Align Current Section" align-current])
              ("Fonts"
               ["Consolas" (set-face-attribute 'default nil :family "Consolas")]
               ["Inconsolata" (set-face-attribute 'default nil :family "Inconsolata")]
               ["Monaco" (set-face-attribute 'default nil :family "Monaco")]
               ["DejaVu" (set-face-attribute 'default nil :family "DejaVu Sans Mono")]
               ["Basilisk" (set-face-attribute 'default nil :family "Basilisk")])
              ("Colours"
               ["Light-on-dark" light-on-dark-theme]
               ["Dark-on-light" dark-on-light-theme]))))
  (if (fboundp 'add-submenu)
      (add-submenu nil menu)
    (require 'easymenu)
    (easy-menu-define chandras-menu global-map "Chandra's Personal Menu" menu)
    (easy-menu-add chandras-menu global-map)))

;;=============================================================================
;;================= Experimental Stuff here ===================================
;;=============================================================================

;; ========== Prevent from making backup files ==========
(setq make-backup-files nil)

;; =============== Auto-Insert Copyright ==================
;;  need to enable it, and
(add-hook 'find-file-hooks
'(lambda ()
   (auto-insert)
   ))
;; then define the auto-insert template/skeleton (this is only a snippet of my setup which features other languages, too)
(defvar my-date-format  "%d/%m/%Y"      ; Alternatives "%a %b %e %T %Y (%z)"
"Format of date to insert with `insert-current-date-time' func
  See help of `format-time-string' for possible replacements")

(setq auto-insert-alist
'(
  ((tcl-mode . "Tcl Program")
   t
   "######################################################################\n#\n"
   "# (C) Copyright Chandra,Nadiminti 2015-16\n#\n"
   "######################################################################\n#\n"
   "# @filename : "(file-name-nondirectory buffer-file-name)"\n#\n"
   "# @author   : "(user-full-name) "\n#\n"
   "# @create   : "(insert (format-time-string my-date-format (current-time)))"\n#\n"
   "# @purpose  :\n#\n"
   "# @component:\n#\n"
   "# @comments :\n#\n"
   "######################################################################\n\n"
   "######################################################################\n"
   "# Package Imports\n"
   "######################################################################\n\n\n\n"
   "######################################################################\n"
   "# Procedures\n"
   "######################################################################\n\n\n\n"
                                        ;(progn (save-buffer)
                                        ;  (shell-command (format "chmod +x %s" (buffer-file-name)))
                                        ;"")
   )
  )
)

(setq auto-insert-alist
'(
  ((python-mode . "Python Program")
   t
   "#!/usr/bin/python\n"
   "######################################################################\n#\n"
   "# (C) Copyright  Chandra,Nadiminti 2015-16\n#\n"
   "######################################################################\n#\n"
   "# @filename : "(file-name-nondirectory buffer-file-name)"\n#\n"
   "# @author   : "(user-full-name) "\n#\n"
   "# @create   : "(insert (format-time-string my-date-format (current-time)))"\n#\n"
   "# @purpose  :\n#\n"
   "# @component:\n#\n"
   "# @comments :\n#\n"
   "######################################################################\n\n"
   "######################################################################\n"
   "# Package Imports\n"
   "######################################################################\n\n\n\n"
   "######################################################################\n"
   "# Procedures\n"
   "######################################################################\n\n\n\n"
                                        ;(progn (save-buffer)
                                        ;  (shell-command (format "chmod +x %s" (buffer-file-name)))
                                        ;"")
   )
  )
)
;; =============My packages Installation =========
(setq package-get-install-to-user-init-directory t)

;; ========= pcomplete ==============
(load "pcomplete")
(load "pcmpl-auto" t)
(add-hook 'shell-mode-hook 'pcomplete-shell-setup)

;;; =========== tabbar ==================
(require 'tabbar)
(tabbar-mode t)
; define all tabs to be one of 3 possible groups: “Emacs Buffer”, “Dired”,
;“User Buffer”.

(defun tabbar-buffer-groups ()
  "Return the list of group names the current buffer belongs to.
This function is a custom function for tabbar-mode's tabbar-buffer-groups.
This function group all buffers into 3 groups:
Those Dired, those user buffer, and those emacs buffer.
Emacs buffer are those starting with “*”."
  (list
   (cond
    ((string-equal "*" (substring (buffer-name) 0 1))
     "Emacs Buffer"
     )
    ((eq major-mode 'dired-mode)
     "Dired"
     )
    (t
     "User Buffer"
     )
    )))
(setq tabbar-buffer-groups-function 'tabbar-buffer-groups)
(global-set-key [M-s-left] 'tabbar-backward)
(global-set-key [M-s-right] 'tabbar-forward)

;; save my session
(desktop-save-mode 1)

;; My org-mode TODOs
(setq org-agenda-files (list "~/org/work.org"
                             "~/org/home.org"))

;; plantUML
;(setq plantuml-jar-path "/home/cnadimin/Downloads/plantuml.jar")
;(require 'plantuml-mode)
;(require 'ob-plantuml)
;(setq org-plantuml-jar-path "/home/cnadimin/Downloads/plantuml.jar")


;(setq org-export-docbook-xsl-fo-proc-command "/usr/bin/fop \"%i\" \"%o\"")
;(setq org-export-docbook-xslt-proc-command "/usr/bin/xsltproc --nonet -o \"%o\" \"%s\" \"%i\"")
;(setq org-export-docbook-xslt-stylesheet "/usr/share/xml/docbook/stylesheet/docbook-xsl/fo/docbook.xsl")
;;(setq org-export-docbook-xslt-stylesheet "/usr/share/xml/docbook/stylesheet/docbook-xsl/html/docbook.xsl")

;; YANG
;(autoload 'yang-mode "yang-mode" "Major mode for editing YANG models." t)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(display-time-mode t)
 '(font-use-system-font t)
 '(ispell-local-dictionary: "en_US")
 '(save-place t nil (saveplace))
 '(show-paren-mode t)
 '(tcl-continued-indent-level 2)
 '(tcl-indent-level 2)
 '(text-mode-hook (quote (turn-on-auto-fill (lambda nil (auto-fill-mode t)) text-mode-hook-identify))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:size "14pt" :family "Courier 10 Pitch")))))
