UTF_8_HEAVY_BALLOT_X='\xe2\x9c\x98'
UTF_8_HEAVY_CHECK_MARK='\xe2\x9c\x94'
UTF_8_HEAVY_WARNING_SIGN='\xe2\x9a\xa0'
UTF_8_INFORMATION_SOURCE='\xe2\x84\xb9'

function print-available-terminal-colors {
    T='gYw'   # The test text
    echo -e "\n                 40m     41m     42m     43m\
     44m     45m     46m     47m";
    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
           '  36m' '1;36m' '  37m' '1;37m';
        do FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
            do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
        done
        echo;
    done
    echo
}

function print-success {
    echo -e "\033[01;32m ${UTF_8_HEAVY_CHECK_MARK}   $*\033[00m"
}

function print-info {
    echo -e "\033[01;34m ${UTF_8_INFORMATION_SOURCE}   $*\033[00m"
}

function print-warning {
    echo -e "\033[01;33m ${UTF_8_HEAVY_WARNING_SIGN}   $*\033[00m"
}

function print-error {
    echo -e "\033[01;31m ${UTF_8_HEAVY_BALLOT_X}   $*\033[00m"
}

function clone-bazaar-branches {
    bzr branch lp:~cisco-openstack/neutron/cis-havana bzr-cisco-neutron-havana
    bzr branch lp:~ubuntu-server-dev/neutron/havana bzr-ubuntu-neutron-havana

    bzr branch lp:~cisco-openstack/neutron/icehouse bzr-cisco-neutron-icehouse
    bzr branch lp:~ubuntu-server-dev/neutron/icehouse bzr-ubuntu-neutron-icehouse

    # bzr branch lp:~cisco-openstack/neutron/juno?? bzr-cisco-neutron-juno
    bzr branch lp:~ubuntu-server-dev/neutron/juno bzr-ubuntu-neutron-juno
}

# Usage example: clone-github-org-repos sensu
function clone-github-user-repos {
    user=${1-cnadiminti}
    mkdir -p $user
    cd $user
    for repo in `curl -ks https://api.github.com/users/$user/repos | ruby -rubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| puts repo["clone_url"] }'`; do
        echo -n $repo...
        error=`git clone -q $repo 2>&1 >/dev/null` \
               && print-success \
               || (print-error $error)
    done
    cd - >/dev/null
}

# Usage example: clone-github-org-repos sensu
function clone-github-org-repos {
    org=$1
    if [ -z $org ] ; then
          print-info 'Usage: clone-github-org-repos [ORG-NAME]'
          return
    fi
    mkdir -p $org
    cd $org
    for repo in `curl -ks https://api.github.com/orgs/$org/repos | ruby -rubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| puts repo["clone_url"] }'`; do
        echo -n $repo...
        error=`git clone -q $repo 2>&1 >/dev/null` \
               && print-success \
               || (print-error $error)
    done
    cd - >/dev/null
}

function git-project-fetch {
    for f in `ls $1`; do
        echo -n $1/${f}...
        if ! [ -d $1/$f ] ; then
            print-warning 'Not directory'
            continue
        fi
        cd $1/$f
        warn=`git rev-parse  2>&1 >/dev/null`
        if [ $? -eq 0 ]; then
            error=`git fetch 2>&1 >/dev/null` \
                && print-success \
                || (print-error $error)
        else
            print-warning $warn
        fi
        cd - >/dev/null
    done
}
